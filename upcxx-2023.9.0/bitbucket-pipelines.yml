# This is a simple build configuration for C++ + Make.
# Check our guides at https://confluence.atlassian.com/x/5Q4SMw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.


definitions:
  options:
    max-time: 60
  variables: &variables
    - name: CI_DEV_CHECK
      default: 0
      description: "1 to run a full dev-check (all tests), 0 for check (abbreviated list of tests)"
    - name: CI_RUN_TESTS
      default: 1
      description: "1 to run tests, 0 for compile-only"
    - name: CI_NETWORKS
      default: smp udp
      description: "space-delimited list of network conduits to use"
    - name: CI_RANKS
      default: 4
      description: "number of processes to use for most tests"
    - name: CI_CONFIGURE_ARGS
      description: "extra configure-time arguments to add"
    - name: CI_EXTRAFLAGS
      default: -Werror
      description: "extra compiler flags to use for tests"
    - name: CI_MAKE_PARALLEL
      default: -j8
      description: "make command-line arguments for parallelism"
    - name: CI_TESTS
      description: "comma-delimited list of test name substrings to INCLUDE (blank = all)"
    - name: CI_NO_TESTS
      description: "comma-delimited list of test name substrings to EXCLUDE (blank = none)"
  steps:
    - step: &build-test
          name: Build and Test
          artifacts: 
            - Makefile
            - config.log
            - bld/gasnet.*/config.*
            - test-results/**
          script:
            - utils/pipeline.sh
          after-script:
            - echo "Status/Results " ; 
              echo "Repo       "$BITBUCKET_REPO_FULL_NAME ; 
              echo "Branch     "$BITBUCKET_BRANCH ; 
              echo "Tag        "$BITBUCKET_TAG ; 
              echo "Commit     "$BITBUCKET_COMMIT ; 
              echo "PR         "$BITBUCKET_PR_ID ; 
              echo " " ; 
              echo "Exit code  "$BITBUCKET_EXIT_CODE

    - step: &gcc-latest
          <<: *build-test
          name: Build and Test gcc:latest
          image: gcc:latest

    - step: &gcc-pedantic
          <<: *build-test
          name: Build and Test gcc:latest/pedantic
          image: gcc:latest
          script:
            - CXXFLAGS='-Wextra -pedantic' utils/pipeline.sh

    - step: &gcc-floor
          <<: *build-test
          name: Build and Test gcc:floor
          image: gcc:6.4.0

    - step: &clang-latest
          <<: *build-test
          name: Build and Test clang:latest on ubuntu:latest
          image: bonachea/clang-latest-ubu
          script:
            - CI_CONFIGURE_ARGS="CC=clang CXX=clang++ --with-python=python3 $CI_CONFIGURE_ARGS" utils/pipeline.sh

    - step: &clang-floor
          <<: *build-test
          name: Build and Test clang:floor on ubuntu:18.04
          image: bonachea/clang-floor-ubu18
          script:
            - CI_CONFIGURE_ARGS="CC=clang CXX=clang++ $CI_CONFIGURE_ARGS" utils/pipeline.sh

pipelines:

  default:
    - parallel:
      - step: *clang-latest
      - step: *gcc-latest
    #  - step: *clang-floor
    #  - step: *gcc-floor

  custom: # on-demand configs

    gcc-latest:
      - variables: *variables
      - step: *gcc-latest

    gcc-floor:
      - variables: *variables
      - step: *gcc-floor

    gcc-pedantic:
      - variables: *variables
      - step: *gcc-pedantic

    clang-latest:
      - variables: *variables
      - step: *clang-latest

    clang-floor:
      - variables: *variables
      - step: *clang-floor


